version: 2.1

orbs:
  boot:
    orbs:
      gradle: circleci/gradle@2.0.1
      docker: circleci/docker@1.0.1
    commands:
      boot-dockerfile:
        parameters:
          base-image:
            type: string
            default: openjdk:13-jdk
            description: Image to be used in the FROM clause.
          jar:
            type: string
            default: app.jar
            description: Path to the generated boot jar file.
          container-jar:
            type: string
            default: /app.jar
            description: Absolute path to the location of the jar file inside the container.
          dockerfile:
            type: string
            default: Dockerfile
            description: Dockerfile file name.
        steps:
        - run:
            name: Write default Dockerfile
            command: |
              echo '
                FROM << parameters.base-image >>
                COPY << parameters.jar >> << parameters.container-jar >>
                ENTRYPOINT ["java","-jar","<< parameters.container-jar >>"]
                ' > Dockerfile
              cat Dockerfile
    jobs:
      build-test-jar:
        parameters:
          executor:
            type: executor
            default: gradle/default
            description: Executor to use for the gradle build.
          gradle:
            type: string
            default: ./gradlew
            description: Gradle command.
          tasks:
            type: string
            default: clean test bootJar
            description: Space-separated gradle task list to run.
          artifacts:
            type: string
            default: build/libs
            description: Space-delimited list of paths relative to the working directory to store.
          artifacts-tmp-dir:
            type: string
            default: /tmp/artifacts
            description: Absolute path to artifacts temporary directory
          workspace:
            type: string
            default: ""
            description: Space-delimited list of paths relative to the working directory to store.
          workspace-tmp-dir:
            type: string
            default: /tmp/workspace
            description: Absolute path to workspace temporary directory
          app-jar:
            type: string
            default: app.jar
            description: Special name for the largest JAR file in the build directory. Used for docker image.
        executor: << parameters.executor >>
        steps:
        - checkout
        - gradle/with_cache:
            steps:
            - run:
                name: Gradle build
                command: << parameters.gradle >> << parameters.tasks >>
        - run:
            name: Prepare artifacts
            command: |
              mkdir -p << parameters.artifacts-tmp-dir >>
              for path in << parameters.artifacts >> ; do
                DEST=<< parameters.artifacts-tmp-dir >>/$(dirname $path)
                echo "$path -> $DEST" 
                mkdir -p << parameters.artifacts-tmp-dir >>/$(dirname ./$path)
                cp -r ./$path $DEST
              done
        - store_artifacts:
            path: << parameters.artifacts-tmp-dir >>
            destination: .
        - gradle/collect_test_results
        - run:
            name: Prepare workspace
            command: |
              mkdir -p << parameters.workspace-tmp-dir >>
              for path in << parameters.workspace >> ; do
                DEST=<< parameters.workspace-tmp-dir >>/$(dirname $path)
                echo "$path -> $DEST" 
                mkdir -p << parameters.workspace-tmp-dir >>/$(dirname ./$path)
                cp -r ./$path $DEST
              done
              
              find build/libs -name '*jar' -printf '%s %p\n' \
                | sort -nr | head -n1 | cut -d\  -f2 \
                | echo $(cat) << parameters.workspace-tmp-dir >>/<< parameters.app-jar >> \
                | xargs cp
        - persist_to_workspace:
            root: << parameters.workspace-tmp-dir >>
            paths:
            - .

      docker-build-push:
        parameters:
          executor:
            type: executor
            default: docker/machine
          workspace:
            type: string
            default: /tmp/workspace
            description: Workspace location
          docker-username:
            type: env_var_name
            default: DOCKER_LOGIN
            description: Docker username environment variable name.
          docker-password:
            type: env_var_name
            default: DOCKER_PASSWORD
            description: Docker password environment variable name.
          registry:
            type: string
            default: docker.io
            description: Docker registry name.
          base-image:
            type: string
            default: openjdk:13-jdk
            description: Image to be used in the FROM clause.
          jar:
            type: string
            default: app.jar
            description: Path to the generated boot jar file.
          container-jar:
            type: string
            default: /app.jar
            description: Absolute path to the location of the jar file inside the container.
          dockerfile:
            type: string
            default: Dockerfile
            description: Dockerfile file name.
          tags:
            type: string
            default: ${CIRCLE_SHA1},${CIRCLE_BUILD_NUM},latest
            description: Comma-delimited list of tags.
          image:
            type: string
            default: ${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}
        executor: << parameters.executor >>
        working_directory: << parameters.workspace >>
        steps:
        - attach_workspace:
            at: << parameters.workspace >>
        - boot-dockerfile:
            base-image: << parameters.base-image >>
            jar: << parameters.jar >>
            container-jar: << parameters.container-jar >>
            dockerfile: << parameters.dockerfile >>
        - docker/check:
            docker-username: << parameters.docker-username >>
            docker-password: << parameters.docker-password >>
            registry: << parameters.registry >>
        - docker/build:
            path: << parameters.workspace >>
            image: << parameters.image >>
            tag: << parameters.tags >>
        - docker/push:
            image: << parameters.image >>
            tag: << parameters.tags >>

  kube:
    orbs:
      ci-kube: circleci/kubernetes@0.11.0
    jobs:
      deploy:
        docker:
        - image: 'cimg/base:stable'
        steps:
        - kube/install-kubectl
        - run:
            name: Export certificate authority data
            command: echo "${KUBE_CERT}" | base64 --decode > cert.crt
        - run:
            name: Update image
            command: >
                kubectl \
                    --token ${KUBE_TOKEN} \
                    --server=${KUBE_SERVER} \
                    --certificate-authority=cert.crt \
                    --record=true \
                    set image deployment/${KUBE_DEPLOYMENT} \
                    ${KUBE_CONTAINER}=${DOCKER_LOGIN}/${DOCKER_REPO}:${CIRCLE_BUILD_NUM}
    

workflows:
  build-docker:
    jobs:
    - boot/build-test-jar
    - boot/docker-build-push:
        requires:
        - boot/build-test-jar
        context: casa

#workflows:
#  build-docker:
#    jobs:
#    - boot/bla
#        - boot/build-test-jar
#        - build
#        - docker-build-publish:
#            context: casa
#            requires:
#            - build
#        - approve-deploy:
#            type: approval
#            requires:
#            - docker-build-publish
#        - deploy:
#            context: casa
#            requires:
#            - approve-deploy

